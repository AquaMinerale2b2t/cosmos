package cope.cosmos.client.features.modules.exploits;

import cope.cosmos.asm.mixins.accessor.ICPacketPlayer;
import cope.cosmos.client.events.network.PacketEvent;
import cope.cosmos.client.features.modules.Category;
import cope.cosmos.client.features.modules.Module;
import cope.cosmos.util.render.RenderBuilder;
import cope.cosmos.util.render.RenderBuilder.Box;
import cope.cosmos.util.render.RenderUtil;
import cope.cosmos.util.string.ColorUtil;
import net.minecraft.item.ItemChorusFruit;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

/**
 * @author aesthetical, linustouchtips
 * @since 10/23/2022
 */
public class ChorusControlModule extends Module {
    public static ChorusControlModule INSTANCE;

    public ChorusControlModule() {
        super("ChorusControl", new String[] {"ChorusTeleport", "ChorusBlink"}, Category.EXPLOITS, "Allows you to control the chorus teleport");
        INSTANCE = this;
    }

    // eaten a chorus
    private boolean chorus;

    // teleport position
    private BlockPos teleport;
    private int teleportID = -1;

    @Override
    public void onDisable() {
        super.onDisable();

        // attempt teleport
        if (teleport != null && teleportID != -1) {

            // teleport
            mc.player.setPosition(teleport.getX(), teleport.getY(), teleport.getZ());
            mc.player.connection.sendPacket(new CPacketPlayer.Position(teleport.getX(), teleport.getY(), teleport.getZ(), mc.player.onGround));
            mc.player.connection.sendPacket(new CPacketConfirmTeleport(teleportID));
        }
        
        // reset
        teleport = null;
        teleportID = -1;
        chorus = false;
    }

    @Override
    public void onUpdate() {

        // once the chorus is eaten, the module must stay active
        if (!chorus) {

            // eating
            if (mc.player.isHandActive()) {

                // held item
                ItemStack item = mc.player.getHeldItem(mc.player.getActiveHand());

                // holding chorus
                if (item.getItem() instanceof ItemChorusFruit) {

                    // ticks eating
                    int use = item.getMaxItemUseDuration() - mc.player.getItemInUseMaxCount();

                    // done eating
                    if (use <= 1) {

                        // pause chorus teleport
                        chorus = true;
                    }
                }
            }
        }
    }

    @Override
    public void onRender3D() {

        // render teleport
        if (teleport != null) {

            // draw box highlight
            RenderUtil.drawBox(new RenderBuilder()
                    .position(new AxisAlignedBB(teleport.getX() - 0.3, teleport.getY(), teleport.getZ() - 0.3, teleport.getX() + 0.3, teleport.getY() + 2.2, teleport.getZ() + 0.3))
                    .color(ColorUtil.getPrimaryAlphaColor(60))
                    .box(Box.BOTH)
                    .setup()
                    .line(3)
                    .depth(true)
                    .blend()
                    .texture()
            );
        }
    }

    @SubscribeEvent
    public void onPacketSend(PacketEvent.PacketSendEvent event) {

        // we have recently eaten a chorus fruit
        if (chorus) {

            // player packets
            if (event.getPacket() instanceof CPacketPlayer) {

                // check if packet is moving
                if (((ICPacketPlayer) event.getPacket()).isMoving()) {

                    // cancel packet
                    event.setCanceled(true);
                }
            }

            // packet for player teleport confirmations
            if (event.getPacket() instanceof CPacketConfirmTeleport) {

                // cancel packet
                teleportID = ((CPacketConfirmTeleport) event.getPacket()).getTeleportId();
                event.setCanceled(true);
            }
        }
    }

    @SubscribeEvent
    public void onPacketReceive(PacketEvent.PacketReceiveEvent event) {

        // we have recently eaten a chorus fruit
        if (chorus) {

            // packet for server teleports
            if (event.getPacket() instanceof SPacketPlayerPosLook) {

                // cancel packet
                teleport = new BlockPos(((SPacketPlayerPosLook) event.getPacket()).getX(), ((SPacketPlayerPosLook) event.getPacket()).getY(),((SPacketPlayerPosLook) event.getPacket()).getZ());
                event.setCanceled(true);
            }
        }
    }
}